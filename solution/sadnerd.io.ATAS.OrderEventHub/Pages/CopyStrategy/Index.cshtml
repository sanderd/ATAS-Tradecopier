@page
@using sadnerd.io.ATAS.OrderEventHub.ProjectXIntegration.CopyManager
@model sadnerd.io.ATAS.OrderEventHub.Models.Pages.CopyStrategies.IndexModel

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-copy me-2"></i>Copy Strategies</h1>
    <a asp-page="/CopyStrategy/Create" class="btn btn-success">
        <i class="fas fa-plus"></i>
    </a>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="table-responsive">
    <table class="table table-striped">
        <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Atas Account</th>
            <th>ProjectX Account</th>
            <th>Vendor</th>
            <th>Contracts</th>
            <th>Multiplier</th>
            <th>Status</th>
            <th class="text-end">Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var strategy in Model.CopyStrategies)
        {
            var status = Model.StrategyStatuses.FirstOrDefault(s => s.StrategyId == strategy.Id);
            var isActive = status?.State == ManagerState.Enabled;
            var hasError = status?.State == ManagerState.Error || status?.State == null;
            var isDisabled = status?.State == ManagerState.Disabled;

            <tr>
                <td>
                    <span class="badge bg-secondary">#@strategy.Id</span>
                </td>
                <td>
                    <strong>@strategy.AtasAccountId</strong>
                </td>
                <td>
                    <div>
                        <strong>@strategy.ProjectXAccountId</strong>
                        @if (strategy.ProjectXAccount?.ApiCredential == null)
                        {
                            <br><small class="text-warning"><i class="fas fa-exclamation-triangle"></i> No API credentials</small>
                        }
                        else if (strategy.ProjectXAccount.ApiCredential.IsActive == false)
                        {
                            <br><small class="text-danger"><i class="fas fa-times-circle"></i> Inactive credentials</small>
                        }
                        else
                        {
                            <br><small class="text-success"><i class="fas fa-check-circle"></i> @strategy.ProjectXAccount.ApiCredential.DisplayName</small>
                        }
                    </div>
                </td>
                <td>
                    @if (strategy.ProjectXAccount != null)
                    {
                        <span class="badge bg-info">@strategy.ProjectXAccount.Vendor</span>
                    }
                </td>
                <td>
                    <small class="text-muted">
                        @strategy.AtasContract → @strategy.ProjectXContract
                    </small>
                </td>
                <td>
                    <span class="badge bg-info">@strategy.ContractMultiplier×</span>
                </td>
                <td>
                    @if (hasError)
                    {
                        <span class="badge bg-danger mb-1">
                            <i class="fas fa-exclamation-triangle me-1"></i>Error
                        </span>
                        @if (!string.IsNullOrEmpty(status?.ErrorMessage))
                        {
                            <br><small class="text-muted">@status.ErrorMessage</small>
                        }
                        @if (status?.ConnectionStatus != null)
                        {
                            <br><small class="text-muted"><i class="fas fa-wifi me-1"></i>@status.ConnectionStatus</small>
                        }
                    }
                    else if (isActive)
                    {
                        <span class="badge bg-success mb-1">
                            <i class="fas fa-play me-1"></i>Active
                        </span>
                        @if (status?.ConnectionStatus != null)
                        {
                            <br><small class="text-muted">
                                <i class="fas @(status.ConnectionStatus == "Connected" ? "fa-wifi text-success" : "fa-wifi-slash text-warning") me-1"></i>@status.ConnectionStatus
                            </small>
                        }
                    }
                    else if (isDisabled)
                    {
                        <span class="badge bg-secondary mb-1">
                            <i class="fas fa-stop me-1"></i>Disabled
                        </span>
                        @if (status?.ConnectionStatus != null)
                        {
                            <br><small class="text-muted"><i class="fas fa-wifi me-1"></i>@status.ConnectionStatus</small>
                        }
                    }
                    else
                    {
                        <span class="badge bg-warning mb-1">
                            <i class="fas fa-question-circle me-1"></i>Not Initialized
                        </span>
                    }
                </td>
                <td>
                    <div class="btn-group-vertical btn-group-sm" role="group">
                        @* State Management Buttons *@
                        @if (hasError)
                        {
                            @if (strategy.ProjectXAccount?.ApiCredential?.IsActive == true)
                            {
                                <form method="post" asp-page-handler="SetState" class="d-inline">
                                    <input type="hidden" name="strategyId" value="@strategy.Id" />
                                    <input type="hidden" name="state" value="@ManagerState.Enabled" />
                                    <button type="submit" class="btn btn-success btn-sm" title="Restart">
                                        <i class="fas fa-redo"></i>
                                    </button>
                                </form>
                            }
                            else
                            {
                                <a asp-page="/TopstepAccount/Edit" asp-route-id="@strategy.ProjectXAccountId" class="btn btn-warning btn-sm" title="Fix Credentials">
                                    <i class="fas fa-wrench"></i>
                                </a>
                            }
                        } 
                        else if (isDisabled)
                        {
                            <form method="post" asp-page-handler="SetState" class="d-inline">
                                <input type="hidden" name="strategyId" value="@strategy.Id" />
                                <input type="hidden" name="state" value="@ManagerState.Enabled" />
                                <button type="submit" class="btn btn-success btn-sm" title="Start">
                                    <i class="fas fa-play"></i>
                                </button>
                            </form>
                        }
                        else if (isActive)
                        {
                            <form method="post" asp-page-handler="SetState" class="d-inline">
                                <input type="hidden" name="strategyId" value="@strategy.Id" />
                                <input type="hidden" name="state" value="@ManagerState.Disabled" />
                                <button type="submit" class="btn btn-secondary btn-sm" title="Stop">
                                    <i class="fas fa-stop"></i>
                                </button>
                            </form>
                        }
                        
                        @* Edit/Delete Buttons - Only show when strategy is not active *@
                        @if (!isActive)
                        {
                            <a asp-page="/CopyStrategy/Edit" asp-route-id="@strategy.Id" class="btn btn-primary btn-sm" title="Edit">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button class="btn btn-danger btn-sm" onclick="confirmAndDelete(@strategy.Id)" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                        }
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@if (!Model.CopyStrategies.Any())
{
    <div class="text-center py-5">
        <i class="fas fa-copy fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No Copy Strategies Found</h4>
        <p class="text-muted">Get started by creating your first copy strategy.</p>
        <a asp-page="/CopyStrategy/Create" class="btn btn-success">
            <i class="fas fa-plus me-1"></i>Add New Strategy
        </a>
    </div>
}

@section Scripts {
    <script>
        async function confirmAndDelete(strategyId) {
            if (confirm("Are you sure you want to delete this strategy? This action cannot be undone.")) {
                try {
                    const response = await fetch(`/api/CopyStrategy/${strategyId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        // Show success message and reload
                        const successAlert = document.createElement('div');
                        successAlert.className = 'alert alert-success alert-dismissible fade show';
                        successAlert.innerHTML = `
                            <i class="fas fa-check-circle me-2"></i>Strategy deleted successfully.
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        `;
                        document.querySelector('h1').parentNode.insertAdjacentElement('afterend', successAlert);
                        
                        // Reload after a short delay
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        const error = await response.json();
                        alert(`Failed to delete the strategy: ${error.message}`);
                    }
                } catch (error) {
                    console.error("Error deleting strategy:", error);
                    alert("An error occurred while deleting the strategy.");
                }
            }
        }
    </script>
}
