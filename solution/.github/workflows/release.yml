name: Create Release Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: './solution'

jobs:
  create-release:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Set tag name
      run: |
        if ("${{ github.event_name }}" -eq "release") {
          echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $env:GITHUB_ENV
        } else {
          echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $env:GITHUB_ENV
        }
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.SOLUTION_PATH }}
    
    - name: Publish BroadcastOrderEvents
      run: |
        dotnet publish "sadnerd.io.ATAS.BroadcastOrderEvents/sadnerd.io.ATAS.BroadcastOrderEvents.csproj" `
          --configuration Release `
          --output "../publish/BroadcastOrderEvents" `
          --no-restore
      working-directory: ${{ env.SOLUTION_PATH }}
    
    - name: Publish OrderEventHub
      run: |
        dotnet publish "sadnerd.io.ATAS.OrderEventHub/sadnerd.io.ATAS.OrderEventHub.csproj" `
          --configuration Release `
          --output "../publish/OrderEventHub" `
          --no-restore
      working-directory: ${{ env.SOLUTION_PATH }}
    
    - name: Create release package
      run: |
        # Create a combined release package
        $releaseDir = "release-package"
        New-Item -ItemType Directory -Force -Path $releaseDir
        
        # Copy BroadcastOrderEvents
        $broadcastDir = Join-Path $releaseDir "BroadcastOrderEvents"
        Copy-Item -Recurse "publish/BroadcastOrderEvents" $broadcastDir
        
        # Copy OrderEventHub  
        $hubDir = Join-Path $releaseDir "OrderEventHub"
        Copy-Item -Recurse "publish/OrderEventHub" $hubDir
        
        # Create a deployment script
        @"
        @echo off
        echo ========================================
        echo  ATAS Trade Copy System Deployment
        echo ========================================
        echo.
        
        echo Deploying BroadcastOrderEvents to ATAS...
        set "ATAS_STRATEGIES_DIR=%APPDATA%\ATAS\Strategies"
        
        if not exist "%ATAS_STRATEGIES_DIR%" (
            echo Error: ATAS Strategies directory not found at %ATAS_STRATEGIES_DIR%
            echo Please ensure ATAS is installed and has been run at least once.
            echo.
            pause
            exit /b 1
        )
        
        echo Copying strategy files...
        copy /Y "BroadcastOrderEvents\CommandLine.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\log4net.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\Macross.Json.Extensions.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\Newtonsoft.Json.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\Pipelines.Sockets.Unofficial.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\protobuf-net.Core.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\protobuf-net.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\sadnerd.io.ATAS.BroadcastOrderEvents.Contracts.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\sadnerd.io.ATAS.BroadcastOrderEvents.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\ServiceWire.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\SkiaSharp.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        copy /Y "BroadcastOrderEvents\websocket-sharp.dll" "%ATAS_STRATEGIES_DIR%\" > nul
        
        if %errorlevel% neq 0 (
            echo Error occurred during file copying.
            pause
            exit /b 1
        )
        
        echo.
        echo ========================================
        echo  Deployment completed successfully!
        echo ========================================
        echo.
        echo Next steps:
        echo 1. Start ATAS Platform
        echo 2. Add 'Broadcast Order Events' strategy to your chart
        echo 3. Run OrderEventHub by executing: OrderEventHub\sadnerd.io.ATAS.OrderEventHub.exe
        echo 4. Open http://localhost:5000 in your browser to configure
        echo.
        pause
        "@ | Out-File -FilePath "$releaseDir/deploy.bat" -Encoding ASCII
        
        # Create start script for OrderEventHub
        @"
        @echo off
        echo Starting OrderEventHub...
        echo.
        echo The web interface will be available at: http://localhost:5000
        echo Press Ctrl+C to stop the application
        echo.
        cd /d "%~dp0OrderEventHub"
        sadnerd.io.ATAS.OrderEventHub.exe
        pause
        "@ | Out-File -FilePath "$releaseDir/start-ordereventhub.bat" -Encoding ASCII
        
        # Create comprehensive README
        @"
        # ATAS Trade Copy System v${{ env.TAG_NAME }}
        
        This release contains the complete ATAS Trade Copy System with two main components:
        
        ## Components
        
        ### BroadcastOrderEvents
        - **Type**: ATAS Strategy
        - **Purpose**: Captures and broadcasts order and position events from ATAS
        - **Location**: `BroadcastOrderEvents/` folder
        - **Installation**: Must be deployed to ATAS Strategies directory
        
        ### OrderEventHub  
        - **Type**: Web Application
        - **Purpose**: Receives events and manages trade copying to other platforms
        - **Location**: `OrderEventHub/` folder
        - **Execution**: Run the executable to start the web server
        
        ## Quick Start
        
        1. **Deploy ATAS Strategy**:
           - Run `deploy.bat` (requires ATAS to be installed)
           - Or manually copy files from `BroadcastOrderEvents/` to `%APPDATA%\ATAS\Strategies`
        
        2. **Start OrderEventHub**:
           - Run `start-ordereventhub.bat`
           - Or execute `OrderEventHub/sadnerd.io.ATAS.OrderEventHub.exe` directly
        
        3. **Configure ATAS**:
           - Open ATAS Platform
           - Add "Broadcast Order Events" strategy to your chart
           - Configure server IP (default: 127.0.0.1) and port (default: 35144)
        
        4. **Setup Trade Copying**:
           - Open http://localhost:5000 in your browser  
           - Configure your target trading accounts and copy strategies
        
        ## System Requirements
        
        - Windows 10/11
        - .NET 8.0 Runtime (usually included with ATAS)
        - ATAS Platform (for BroadcastOrderEvents)
        - Web browser (for OrderEventHub configuration)
        
        ## Port Configuration
        
        - **OrderEventHub Web Interface**: Port 5000 (configurable)
        - **ServiceWire Communication**: Port 35144 (configurable in ATAS strategy)
        
        ## Support Files
        
        - `deploy.bat`: Automated deployment script for ATAS strategy
        - `start-ordereventhub.bat`: Quick start script for the web application
        - `README.md`: This documentation file
        
        ## Troubleshooting
        
        - Ensure ATAS is closed when running deploy.bat
        - Check that no firewall is blocking ports 5000 and 35144
        - Verify .NET 8.0 runtime is installed if you get startup errors
        - Check ATAS logs if the strategy fails to load
        
        ## File Structure
        ```
        release-package/
        ??? deploy.bat                  # ATAS deployment script
        ??? start-ordereventhub.bat    # OrderEventHub startup script  
        ??? README.md                  # This file
        ??? BroadcastOrderEvents/      # ATAS strategy files
        ?   ??? *.dll                  # Strategy and dependencies
        ?   ??? ...
        ??? OrderEventHub/             # Web application
            ??? sadnerd.io.ATAS.OrderEventHub.exe
            ??? wwwroot/               # Web assets
            ??? ...
        ```
        
        For detailed documentation and source code, visit: https://github.com/your-repo-url
        "@ | Out-File -FilePath "$releaseDir/README.md" -Encoding UTF8
        
        # Compress the release package
        $zipName = "atas-tradecopy-${{ env.TAG_NAME }}.zip"
        Compress-Archive -Path "$releaseDir/*" -DestinationPath $zipName -Force
        
        echo "RELEASE_FILE=$zipName" >> $env:GITHUB_ENV
        
        # Display package contents for verification
        echo "Created release package: $zipName"
        Get-ChildItem $releaseDir -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
    
    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-package-${{ env.TAG_NAME }}
        path: ${{ env.RELEASE_FILE }}
        retention-days: 90
        
    - name: Attach to GitHub Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.RELEASE_FILE }}
        asset_name: ${{ env.RELEASE_FILE }}
        asset_content_type: application/zip