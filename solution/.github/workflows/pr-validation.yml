name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: './solution'

jobs:
  validate:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.SOLUTION_PATH }}
    
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      working-directory: ${{ env.SOLUTION_PATH }}
    
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage"
      working-directory: ${{ env.SOLUTION_PATH }}
      continue-on-error: true
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false
    
    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: '**/coverage.cobertura.xml'
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'
      continue-on-error: true
    
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
      continue-on-error: true
    
    - name: Test publish (validate deployment readiness)
      run: |
        echo "Testing BroadcastOrderEvents publish..."
        dotnet publish "sadnerd.io.ATAS.BroadcastOrderEvents/sadnerd.io.ATAS.BroadcastOrderEvents.csproj" `
          --configuration Release `
          --output "../test-publish/BroadcastOrderEvents" `
          --no-restore `
          --verbosity minimal
        
        echo "Testing OrderEventHub publish..."  
        dotnet publish "sadnerd.io.ATAS.OrderEventHub/sadnerd.io.ATAS.OrderEventHub.csproj" `
          --configuration Release `
          --output "../test-publish/OrderEventHub" `
          --no-restore `
          --verbosity minimal
        
        echo "Publish validation completed successfully!"
      working-directory: ${{ env.SOLUTION_PATH }}